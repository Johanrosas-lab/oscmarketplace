<?php
namespace Drupal\sigma_payment\Services;


use Drupal\sigma_payment\SDK\Entities\Customer;
use Drupal\sigma_payment\SDK\Managers\TransactionManager;
use Drupal\sigma_payment\SDK\Entities\Transaction;
use Drupal\sigma_payment\SDK\Entities\CreditCard;
use Drupal\sigma_payment\SDK\Entities\TransactionSearchRequest;
use Drupal\sigma_payment\SDK\Entities\TransactionOptions;

class SigmaTransactionManager implements SigmaTransactionManagerInterface {

  /**
   * Perform Sale transaction using Customer’s information.
   *
   * @param $uid
   *   User ID ( Drupal )
   * @param $order_id
   *   Order ID.
   * @param $token_card
   *  Token card
   * @param $amount
   *  Amount to paid.
   * @param $currency
   *
   * @return mixed
   */
  function saleTransaction($uid, $order_id, $token_card, $amount, $currency) {
    if ($currency === 'USD') {
      $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp();
    }
    else {
      $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp('CRC');
    }
    $trans_manager = new TransactionManager($gateway);
    $customer = \Drupal::service('sigma_payment.customer_manager')->searchCustomerByUid($uid);

    $trans_request = new Transaction();
    $trans_request->CustomerData = new Customer();
    $trans_request->CustomerData->CustomerId = $customer->CustomerId;
    $trans_request->CustomerData->CreditCards = [];
    $trans_request->Amount = $amount;
    $card = new CreditCard();
    $card->Token = $token_card;
    $trans_request->CustomerData->CreditCards[] = $card;
    $trans_request->OrderTrackingNumber = $order_id;
    $response = $trans_manager->Sale($trans_request);

    if($response->ResponseDetails->IsSuccess === true) {
      return $response->ResponseDetails->TransactionId;
    }
    \Drupal::logger('SIGMA_PAYMENT')
        ->error('<pre>' . print_r($response, 1) . '</pre>');
    $message = $response->ResponseDetails->ResponseSummary;
    if (!$message) {
      $message = t('TRANSACCION NO PERMITIDA');
    }
    \Drupal::messenger()->addError($message);
    return NULL;
  }

  /**
   * Search transaction.
   * @param $transaction_id
   *    A unique token generated by the SIGMA GATEWAY API
   *
   * @return mixed
   */
  function searchTransaction($transaction_id) {
    $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp();
    $trans_manager = new TransactionManager($gateway);
    $search = new TransactionSearchRequest();
    $search->TransactionId = $transaction_id;
    return $trans_manager->SearchTransaction($search);
  }

  /**
   * Refunds approved  Sale transaction  using referenceSaleTransaction ID.
   * Refunds  on  the same  day original  Sale  happened  effectively  void
   * the  transaction  without  impact  on  the  cardholder’s account;
   * on the other hand Refunds on the day after original Sale happened
   * generate a credit operation to the cardholder, noticeable in their
   * bank account statement.
   *
   * @param $transaction_id
   *    A unique token generated by the SIGMA GATEWAY API
   * @param $amount
   *    Amount to paid.
   *
   * @param $currency
   *
   * @return mixed
   */
  function refundTransaction($transaction_id, $amount, $currency) {
    if ($currency === 'USD') {
      $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp();
    }
    else {
      $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp('CRC');
    }
    $trans_manager = new TransactionManager($gateway);
    $refund = new Transaction();
    $refund->Amount = $amount;
    $refund->TransactionId = $transaction_id;
    return $trans_manager->Refund($refund);
  }
}
