<?php

namespace Drupal\sigma_payment\Services;

use Drupal\sigma_payment\SDK\Entities\Customer;
use Drupal\sigma_payment\SDK\Managers\CustomerManager;
use Drupal\sigma_payment\SDK\Entities\CreditCard;
use Drupal\sigma_payment\SDK\Entities\CustomerSearch;


class SigmaCardManager implements SigmaCardManagerInterface {

  /**
   * Create a new Card and set in the customer
   * @param $uid
   *    User ID ( Drupal )
   * @param $card_name
   *    Card name owner
   * @param $card_number
   *    Card number
   * @param $expiration_card
   *    Expiration card (MMYY)
   * @param $cvv
   *    Card verification code
   * @return mixed
   */
  public function addCard($uid, $card_name, $card_number, $expiration_card, $cvv) {
    // TODO: Implement addCard() method.
    if (strlen($expiration_card) === 4) {
      $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp();
      $customerManager = new CustomerManager($gateway);
      $customer = \Drupal::service('sigma_payment.customer_manager')->searchCustomerByUid($uid);
      $card = new CreditCard();
      $card->CardholderName = $card_name;
      $card->ExpirationDate = $expiration_card;
      $card->Number = $card_number;
      $card->CVV = $cvv;
      $customer->CreditCards[] = $card;
      $result = $customerManager->UpdateCustomer($customer);

      foreach ( $result->CreditCards as $item) {
        if (substr($card_number, -4) === substr($item->Number, -4) && $item->Status === 'Active') {
          return $item->Token;
        }
      }

      \Drupal::logger('SIGMA_PAYMENT')
        ->error('<pre>' . print_r('We have some problems add th card:. ' . $result, 1) . '</pre>');
      return NULL;
    }
    \Drupal::logger('SIGMA_PAYMENT')
      ->error('<pre>' . print_r('The $expiration_card must be MMYY format.', 1) . '</pre>');
    return NULL;

  }

  /**
   * Update status card
   *
   * @param $uid
   *    User ID ( Drupal )
   * @param $token_card
   *    A unique token generated by the SIGMA GATEWAY API.
   * @param $status
   *    New status: Active/Inactive
   * @return mixed
   */
  public function updateStatusCard($uid, $token_card, $status) {
    // TODO: Implement updateStatusCard() method.
    if ($status === 'Active' || $status === 'Inactive') {
      $gateway = \Drupal::service('sigma_payment.config_onsite')->setUp();
      $customerManager = new CustomerManager($gateway);
      $customer = \Drupal::service('sigma_payment.customer_manager')
        ->searchCustomerByUid($uid);
      $card = new CreditCard();
      $card->Token = $token_card;
      $card->Status = $status;
      $customer->CreditCards[] = $card;
      $result = $customerManager->UpdateCustomer($customer);
      foreach ( $result->CreditCards as $item) {
        if ($token_card === $item->Token && $item->Status === $status) {
          return $result;
        }
      }
      \Drupal::logger('SIGMA_PAYMENT')
        ->error('<pre>' . print_r('We have some problems add th card:. ' . $result, 1) . '</pre>');
      return NULL;
    }
    \Drupal::logger('SIGMA_PAYMENT')
      ->error('<pre>' . print_r('The $status only accept "Active" or "Inactive" value.', 1) . '</pre>');
    return NULL;
  }
}
